input(id="modal-input", type="checkbox")
.add-score
    .add_score__modal
        label(for="modal-input").jt-cancel-circle
        .add-score__title Add score
        -
            const labelList = ["Winner", "Loser"]
        form#add-score
            each labelValueSuperHero, keyCool in labelList
                .add-score__row
                    .add-score__label=labelValueSuperHero
                    span.add-score__name-wrapper
                        input.add-score__name
                        .add-score__tiny-label Name
                    span.add-score__wrapper
                        span.jt-circle-down
                        select.add-score__score
                            option(value="") Goals
                            each option, key in Array(12)
                                option(value=key+1)=key+1
                    input(
                        type="radio"
                        name=`name-${keyCool}`
                        id=`red-${keyCool}`
                    )
                    label.add-score__team-label(for=`red-${keyCool}`) Red
                    input(
                        type="radio"
                        name=`name-${keyCool}`
                        id=`blue-${keyCool}`
                    )
                    label.add-score__team-label(for=`blue-${keyCool}`) Blue
            .add-score__button-wrapper
                button.add-score__button Add score
script.
    let scoreList = [];
    const inputRadioList = [...document.querySelectorAll('input[type="radio"]')]
    inputRadioList.map((inputRadio, key) => {
        inputRadio.addEventListener('change', e => {
            // row clicked, 0 -> first, 1 -> second
            const rowCliked = Math.floor(key / 2);

            //- is it red or blue?
            const elementIdIndex = inputRadio.id.split('-')[0];
            
            // if we click on red, make the target blue, 
            // if we click on blue, make the target red
            const targetFirst = elementIdIndex === 'red' ? 'blue' : 'red';

            // if we click on row with index 0, target must be on row with
            // index 1, or if we click on row with index 1, target must be 
            // on row with index 0
            const targetSecond = rowCliked === 1 ? 0 : 1;

            //- concatenate (join, glue) the targetFirst and targetSecond
            // values together using a "-" between them
            const target = `${targetFirst}-${targetSecond}`;
            document.getElementById(target).checked = true;
        });
    })

    const dealWithTheFormValues = () => {
        const selectValueList = [...document.querySelectorAll('.add-score__score')].map(selectValue => selectValue.value);
        const nameValueList = [...document.querySelectorAll('.add-score__name')].map(selectValue => selectValue.value);
        //- console.log(scoreList);
        //- add to scoreList
        selectValueList.map((selectValue, key) => {
            const findIt = scoreList.filter((score, fKey) => {
                const isItTrue = score.name === nameValueList[key];
                // update if you find it
                if (isItTrue) {
                    scoreList[fKey].value += parseInt(selectValueList[key], 10);
                    console.log(scoreList[fKey]);
                }
                return isItTrue;
            }).length;
            console.log(findIt);

            // if none was found
            if(!findIt) {
                scoreList.push({
                    name: nameValueList[key],
                    value: parseInt(selectValueList[key], 10)
                })
            }
        })
        console.log(scoreList);
        console.clear();
        // populate the leader board
        const firstThree = scoreList
            .sort((a, b) => b.value - a.value)
            .slice(0, 3);
        [...document.querySelectorAll('.board-list__item')]
            .map((boardItem, key) => {
                //- console.log( boardItem.querySelector('.name'))
                const name = firstThree[key] ? firstThree[key].name : '';
                const score = firstThree[key] ? firstThree[key].value : 0;
                boardItem.querySelector('.name').innerHTML = name;
                boardItem.querySelector('.score').innerHTML = score;
            })
    }

    // select the hit me button
    const hitMeButton = document.querySelector('.add-score__button');
    hitMeButton.addEventListener('click', e => {
        // stop the form from submitting
        e.preventDefault();
        //- check if a team has been selected
        if(inputRadioList.filter(inputRadio => inputRadio.checked).length) {
            console.log('it has been selected');
            dealWithTheFormValues();
        } else {
            alert(`Select a team please`);
        }
    })
